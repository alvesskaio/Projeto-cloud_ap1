#!/usr/bin/env python3
"""
Pipeline Principal para Processamento de Cota√ß√µes B3

Este script orquestra o pipeline completo:
1. Extra√ß√£o de dados da B3 (download e armazenamento no blob local)
2. Processamento do XML e inser√ß√£o no PostgreSQL local

Requisitos:
- PostgreSQL executando em localhost:5432
- Azurite (emulador blob storage) executando em localhost:10000
- Depend√™ncias Python instaladas (requirements.txt)
"""

import sys
import os
import time
from datetime import datetime
from helpers import yymmdd
from extract import run as extract_run
from transform_load import transform_and_load
from database import DatabaseManager

def print_timestamp():
    """Retorna timestamp formatado para logs"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def print_section_header(title):
    """Imprime cabe√ßalho de se√ß√£o formatado"""
    print("\n" + "=" * 60)
    print(f"[{print_timestamp()}] {title}")
    print("=" * 60)

def check_prerequisites():
    """
    Verifica se os pr√©-requisitos est√£o dispon√≠veis
    """
    print(f"[{print_timestamp()}] [INFO] Verificando pr√©-requisitos...")
    
    start_time = time.time()
    prereq_status = []

    # Verificar se conseguimos conectar ao banco
    print(f"[{print_timestamp()}] [INFO] Testando conex√£o com PostgreSQL...")
    try:
        db = DatabaseManager()
        if not db.connect():
            print(f"[{print_timestamp()}] [ERROR] PostgreSQL n√£o est√° dispon√≠vel em localhost:5433")
            print("        Execute: docker-compose up -d")
            prereq_status.append(("PostgreSQL", False, "Conex√£o falhou"))
        else:
            print(f"[{print_timestamp()}] [OK] PostgreSQL dispon√≠vel e conectado")
            prereq_status.append(("PostgreSQL", True, "Conectado"))
    except Exception as e:
        print(f"[{print_timestamp()}] [ERROR] Erro ao testar PostgreSQL: {e}")
        prereq_status.append(("PostgreSQL", False, str(e)))

    # Verificar se o Azurite est√° rodando
    print(f"[{print_timestamp()}] [INFO] Testando conex√£o com Azurite (Blob Storage)...")
    try:
        from azure_storage import BlobServiceClient, AZURE_BLOB_CONNECTION
        service = BlobServiceClient.from_connection_string(AZURE_BLOB_CONNECTION)
        # Tentativa simples de listar containers
        container_list = list(service.list_containers())
        container_count = len(container_list)
        print(f"[{print_timestamp()}] [OK] Azurite dispon√≠vel ({container_count} containers encontrados)")
        prereq_status.append(("Azurite", True, f"{container_count} containers"))
    except Exception as e:
        print(f"[{print_timestamp()}] [ERROR] Azurite n√£o est√° dispon√≠vel em localhost:10003")
        print(f"        Erro: {e}")
        print("        Execute: docker-compose up -d")
        prereq_status.append(("Azurite", False, str(e)))

    # Resumo dos pr√©-requisitos
    elapsed_time = time.time() - start_time
    print(f"\n[{print_timestamp()}] [INFO] Verifica√ß√£o de pr√©-requisitos conclu√≠da em {elapsed_time:.2f}s")
    print("üìã Status dos servi√ßos:")
    
    all_ok = True
    for service, status, details in prereq_status:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {service}: {details}")
        if not status:
            all_ok = False
    
    return all_ok

def run_pipeline(date_str=None, file_name=None):
    """
    Executa o pipeline completo de processamento

    Args:
        date_str: Data no formato YYMMDD (ex: "250923"). Se None, usa data atual
        file_name: Nome espec√≠fico do arquivo. Se None, usa padr√£o baseado na data
    """
    pipeline_start_time = time.time()
    
    # Define data e nome do arquivo
    if not date_str:
        # Usa data do dia anterior por padr√£o (dados mais prov√°veis de estar dispon√≠veis)
        from datetime import timedelta
        yesterday = datetime.now() - timedelta(days=1)
        date_str = yymmdd(yesterday)
        print(f"[{print_timestamp()}] [INFO] Usando data do dia anterior: {date_str}")

    if not file_name:
        file_name = f"BVBG186_{date_str}.xml"

    print_section_header("INICIANDO PIPELINE DE PROCESSAMENTO")
    print(f"üìÖ Data do preg√£o: {date_str}")
    print(f"üìÅ Arquivo alvo: {file_name}")
    print(f"‚è∞ Hor√°rio de in√≠cio: {print_timestamp()}")

    try:
        # Etapa 1: Extra√ß√£o (download da B3 e upload para blob local)
        print_section_header("ETAPA 1: EXTRA√á√ÉO DE DADOS DA B3")
        step1_start = time.time()
        
        try:
            extract_run(date_str)  # Passa a data para a fun√ß√£o de extra√ß√£o
            step1_time = time.time() - step1_start
            print(f"[{print_timestamp()}] [OK] ‚úÖ Extra√ß√£o conclu√≠da com sucesso em {step1_time:.2f}s")
        except Exception as e:
            step1_time = time.time() - step1_start
            print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha na extra√ß√£o ap√≥s {step1_time:.2f}s: {e}")
            return False

        # Etapa 2: Transforma√ß√£o e Carga (processamento XML e inser√ß√£o no PostgreSQL)
        print_section_header("ETAPA 2: TRANSFORMA√á√ÉO E CARGA NO POSTGRESQL")
        step2_start = time.time()
        
        try:
            success = transform_and_load(file_name)
            step2_time = time.time() - step2_start
            
            if success:
                print(f"[{print_timestamp()}] [OK] ‚úÖ Transforma√ß√£o e carga conclu√≠das com sucesso em {step2_time:.2f}s")
            else:
                print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha na transforma√ß√£o e carga ap√≥s {step2_time:.2f}s")
                return False
        except Exception as e:
            step2_time = time.time() - step2_start
            print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha na transforma√ß√£o e carga ap√≥s {step2_time:.2f}s: {e}")
            return False

        # Resumo final
        total_time = time.time() - pipeline_start_time
        print_section_header("PIPELINE CONCLU√çDO COM SUCESSO")
        print(f"üéâ Status: SUCESSO")
        print(f"üìä Dados processados: {date_str}")
        print(f"‚è±Ô∏è  Tempo total: {total_time:.2f}s")
        print(f"‚è∞ Conclu√≠do em: {print_timestamp()}")
        print(f"üíæ Dados inseridos no PostgreSQL")
        
        return True

    except KeyboardInterrupt:
        total_time = time.time() - pipeline_start_time
        print(f"\n[{print_timestamp()}] [INFO] ‚ö†Ô∏è  Pipeline interrompido pelo usu√°rio ap√≥s {total_time:.2f}s")
        return False
    except Exception as e:
        total_time = time.time() - pipeline_start_time
        print(f"\n[{print_timestamp()}] [ERROR] ‚ùå Erro inesperado no pipeline ap√≥s {total_time:.2f}s: {e}")
        return False

def show_help():
    """Exibe ajuda sobre como usar o script"""
    help_text = """
Pipeline de Processamento de Cota√ß√µes B3

USO:
    python main.py                    # Executa com data do dia anterior
    python main.py YYMMDD            # Executa com data espec√≠fica
    python main.py --check          # Verifica pr√©-requisitos
    python main.py --help           # Exibe esta ajuda

EXEMPLOS:
    python main.py                   # Processa cota√ß√µes de ontem (mais prov√°vel de estar dispon√≠vel)
    python main.py 250923           # Processa cota√ß√µes de 23/09/2025
    python main.py --check          # Verifica se PostgreSQL e Azurite est√£o rodando

PR√â-REQUISITOS:
    1. Docker Compose executando PostgreSQL e Azurite:
       docker-compose up -d

    2. Depend√™ncias Python instaladas:
       pip install -r requirements.txt

ESTRUTURA DO PIPELINE:
    1. Extra√ß√£o: Download de dados da B3 ‚Üí Blob Storage local (Azurite)
    2. Transforma√ß√£o: Processamento XML ‚Üí Dados estruturados
    3. Carga: Inser√ß√£o no PostgreSQL local
    """
    print(help_text)

def main():
    """Fun√ß√£o principal"""

    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        arg = sys.argv[1]

        if arg in ['--help', '-h']:
            show_help()
            return
        elif arg in ['--check', '-c']:
            if check_prerequisites():
                print("[OK] Todos os pr√©-requisitos est√£o dispon√≠veis")
                sys.exit(0)
            else:
                print("[ERROR] Alguns pr√©-requisitos n√£o est√£o dispon√≠veis")
                sys.exit(1)
        elif arg.isdigit() and len(arg) == 6:
            # Data fornecida no formato YYMMDD
            date_str = arg
        else:
            print(f"[ERROR] Argumento inv√°lido: {arg}")
            print("Use --help para ver op√ß√µes dispon√≠veis")
            sys.exit(1)
    else:
        date_str = None

    # Verificar pr√©-requisitos
    print_section_header("VERIFICA√á√ÉO DE PR√â-REQUISITOS")
    if not check_prerequisites():
        print(f"\n[{print_timestamp()}] [ERROR] ‚ùå Pr√©-requisitos n√£o atendidos. Pipeline n√£o pode continuar.")
        print("üí° Use 'python main.py --help' para mais informa√ß√µes")
        sys.exit(1)

    # Executar pipeline
    success = run_pipeline(date_str)

    if success:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()