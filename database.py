from sqlalchemy import create_engine, Column, Integer, String, Date, Numeric, DECIMAL, DateTime, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import os
import time
from tqdm import tqdm

def print_timestamp():
    """Retorna timestamp formatado para logs"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Configura√ß√£o da conex√£o com PostgreSQL local
DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://postgres:postgres@localhost:5433/cotacoes_b3"
)

Base = declarative_base()

def print_timestamp():
    """Retorna timestamp formatado para logs"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

class Cotacoes(Base):
    """
    Modelo SQLAlchemy para a tabela Cotacoes
    Permite m√∫ltiplos registros do mesmo ativo/data (diferentes transa√ß√µes)
    """
    __tablename__ = 'cotacoes'

    id = Column(Integer, primary_key=True, autoincrement=True)  # PK √∫nica - permite duplicatas de ativo+data
    ativo = Column(String(10), nullable=False)
    data_pregao = Column('datapregao', Date, nullable=False)
    abertura = Column(DECIMAL(10, 2))
    fechamento = Column(DECIMAL(10, 2))
    volume = Column(DECIMAL(18, 2))

    # Sem constraints √∫nicas - cada registro √© uma transa√ß√£o separada

    def __repr__(self):
        return f"<Cotacoes(id={self.id}, ativo='{self.ativo}', data_pregao='{self.data_pregao}', fechamento='{self.fechamento}')>"

class DatabaseManager:
    """Gerenciador da conex√£o com o banco PostgreSQL"""

    def __init__(self, database_url=None):
        self.database_url = database_url or DATABASE_URL
        self.engine = None
        self.SessionLocal = None

    def connect(self):
        """Estabelece conex√£o com o banco de dados"""
        connect_start = time.time()
        
        try:
            print(f"[{print_timestamp()}] [INFO] üîå Iniciando conex√£o com PostgreSQL...")
            print(f"[{print_timestamp()}] [INFO] üéØ URL: {self.database_url.split('@')[1] if '@' in self.database_url else self.database_url}")
            
            self.engine = create_engine(self.database_url, echo=False)
            
            # Teste a conex√£o fazendo uma query simples
            connection = self.engine.connect()
            result = connection.execute(text("SELECT version()"))
            version_info = result.fetchone()[0]
            connection.close()
            
            self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
            
            connect_time = time.time() - connect_start
            print(f"[{print_timestamp()}] [OK] ‚úÖ Conectado ao PostgreSQL em {connect_time:.2f}s")
            print(f"[{print_timestamp()}] [INFO] üóÑÔ∏è Servidor: {version_info.split(' on ')[0]}")
            
            return True
            
        except Exception as e:
            connect_time = time.time() - connect_start
            print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha ao conectar ao banco ap√≥s {connect_time:.2f}s: {e}")
            print(f"[{print_timestamp()}] [INFO] üí° Dica: Verifique se o PostgreSQL est√° rodando com 'docker-compose up -d'")
            return False

    def create_tables(self):
        """Cria as tabelas no banco se n√£o existirem"""
        create_start = time.time()
        
        try:
            print(f"[{print_timestamp()}] [INFO] üóÑÔ∏è Verificando estrutura de tabelas...")
            
            # Verificar se as tabelas j√° existem
            from sqlalchemy import inspect
            inspector = inspect(self.engine)
            existing_tables = inspector.get_table_names()
            
            if 'cotacoes' in existing_tables:
                print(f"[{print_timestamp()}] [INFO] ‚úÖ Tabela 'cotacoes' j√° existe")
                
                # Verificar estrutura da tabela
                columns = inspector.get_columns('cotacoes')
                column_names = [col['name'] for col in columns]
                print(f"[{print_timestamp()}] [INFO] üìã Colunas encontradas: {', '.join(column_names)}")
                
                # Contar registros existentes
                try:
                    with self.engine.connect() as conn:
                        result = conn.execute(text("SELECT COUNT(*) FROM cotacoes"))
                        count = result.fetchone()[0]
                        print(f"[{print_timestamp()}] [INFO] üìä Registros existentes: {count:,}")
                except Exception as e:
                    print(f"[{print_timestamp()}] [WARN] ‚ö†Ô∏è N√£o foi poss√≠vel contar registros: {e}")
            else:
                print(f"[{print_timestamp()}] [INFO] üèóÔ∏è Tabela 'cotacoes' n√£o existe, ser√° criada")
            
            Base.metadata.create_all(bind=self.engine)
            
            create_time = time.time() - create_start
            print(f"[{print_timestamp()}] [OK] ‚úÖ Estrutura de tabelas verificada/criada em {create_time:.2f}s")
            return True
            
        except Exception as e:
            create_time = time.time() - create_start
            print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha ao criar tabelas ap√≥s {create_time:.2f}s: {e}")
            return False

    def get_session(self):
        """Retorna uma nova sess√£o do banco"""
        if not self.SessionLocal:
            raise RuntimeError("Banco n√£o conectado. Execute connect() primeiro.")
        return self.SessionLocal()

    def insert_cotacoes_batch(self, cotacoes_list):
        """
        Insere todas as cota√ß√µes no banco (permite m√∫ltiplos registros do mesmo ativo/data)

        Args:
            cotacoes_list: Lista de dicion√°rios com dados das cota√ß√µes
                          Formato: {'ativo': str, 'data_pregao': date, 'abertura': float, 'fechamento': float, 'volume': float}
        """
        if not cotacoes_list:
            print(f"[{print_timestamp()}] [WARNING] ‚ö†Ô∏è Lista de cota√ß√µes vazia")
            return 0

        insert_start = time.time()
        batch_size = 1000  # Inserir em batches para melhor performance
        total_records = len(cotacoes_list)
        
        print(f"[{print_timestamp()}] [INFO] üíæ Iniciando inser√ß√£o de {total_records:,} cota√ß√µes em batches de {batch_size}")

        session = self.get_session()
        try:
            inserted_count = 0
            
            # Barra de progresso para inser√ß√£o
            progress_bar = tqdm(
                cotacoes_list,
                desc="üíæ Inserindo no DB",
                unit="registros",
                bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]'
            )
            
            for i, cotacao_data in enumerate(progress_bar):
                # Commit em batches para melhor performance
                if i % batch_size == 0 and i > 0:
                    session.commit()
                
                # Inserir cada registro - PK auto-incremento garante unicidade
                nova_cotacao = Cotacoes(
                    ativo=cotacao_data['ativo'],
                    data_pregao=cotacao_data['data_pregao'],
                    abertura=cotacao_data.get('abertura'),
                    fechamento=cotacao_data.get('fechamento'),
                    volume=cotacao_data.get('volume')
                )
                session.add(nova_cotacao)
                inserted_count += 1

            # Commit final
            progress_bar.close()
            session.commit()
            
            insert_time = time.time() - insert_start
            rate = inserted_count / insert_time if insert_time > 0 else 0
            
            print(f"[{print_timestamp()}] [OK] ‚úÖ Inser√ß√£o conclu√≠da com sucesso!")
            print(f"[{print_timestamp()}] [INFO] üìä ESTAT√çSTICAS DE INSER√á√ÉO:")
            print(f"[{print_timestamp()}] [INFO]   üì• Registros inseridos: {inserted_count:,}")
            print(f"[{print_timestamp()}] [INFO]   ‚è±Ô∏è  Tempo total: {insert_time:.2f}s")
            print(f"[{print_timestamp()}] [INFO]   üìà Taxa de inser√ß√£o: {rate:.0f} registros/s")
            print(f"[{print_timestamp()}] [INFO]   üíæ Todos os registros mantidos (sem remo√ß√£o de duplicatas)")
            
            return inserted_count

        except Exception as e:
            session.rollback()
            insert_time = time.time() - insert_start
            
            print(f"[{print_timestamp()}] [ERROR] ‚ùå Falha ao inserir cota√ß√µes ap√≥s {insert_time:.2f}s: {e}")
            print(f"[{print_timestamp()}] [DEBUG] üîç Exemplo de dados:")
            
            if cotacoes_list:
                for i, exemplo in enumerate(cotacoes_list[:3]):
                    print(f"[{print_timestamp()}] [DEBUG]   [{i+1}] {exemplo}")
            else:
                print(f"[{print_timestamp()}] [DEBUG]   Lista vazia")
            
            # Informa√ß√µes adicionais de debug
            try:
                # Verificar se conseguimos ao menos conectar ao banco
                result = session.execute(text("SELECT 1"))
                print(f"[{print_timestamp()}] [DEBUG] ‚úÖ Conex√£o com banco ainda ativa")
            except Exception as conn_error:
                print(f"[{print_timestamp()}] [DEBUG] ‚ùå Conex√£o com banco perdida: {conn_error}")
            
            return 0
            
        finally:
            session.close()

if __name__ == "__main__":
    # Teste da conex√£o
    db = DatabaseManager()
    if db.connect():
        db.create_tables()